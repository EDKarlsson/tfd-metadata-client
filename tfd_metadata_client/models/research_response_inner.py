# coding: utf-8

"""
    The First Descendant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from tfd_metadata_client.models.research_response_inner_research_cost_inner import ResearchResponseInnerResearchCostInner
from tfd_metadata_client.models.research_response_inner_research_material_inner import ResearchResponseInnerResearchMaterialInner
from tfd_metadata_client.models.research_response_inner_research_result_inner import ResearchResponseInnerResearchResultInner
from typing import Optional, Set
from typing_extensions import Self

class ResearchResponseInner(BaseModel):
    """
    ResearchResponseInner
    """ # noqa: E501
    research_id: Optional[StrictStr] = Field(default=None, description="Research identifier")
    research_name: Optional[StrictStr] = Field(default=None, description="Research name")
    repeatable_research: Optional[StrictBool] = Field(default=None, description="Repeatable")
    research_type: Optional[StrictStr] = Field(default=None, description="Research type")
    research_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Research time (seconds)")
    research_cost: Optional[List[ResearchResponseInnerResearchCostInner]] = Field(default=None, description="Research cost")
    research_boost_cost: Optional[List[ResearchResponseInnerResearchCostInner]] = Field(default=None, description="Boost Research Cost")
    research_result: Optional[List[ResearchResponseInnerResearchResultInner]] = Field(default=None, description="Research result")
    research_material: Optional[List[ResearchResponseInnerResearchMaterialInner]] = Field(default=None, description="Research materials")
    __properties: ClassVar[List[str]] = ["research_id", "research_name", "repeatable_research", "research_type", "research_time", "research_cost", "research_boost_cost", "research_result", "research_material"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResearchResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in research_cost (list)
        _items = []
        if self.research_cost:
            for _item_research_cost in self.research_cost:
                if _item_research_cost:
                    _items.append(_item_research_cost.to_dict())
            _dict['research_cost'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in research_boost_cost (list)
        _items = []
        if self.research_boost_cost:
            for _item_research_boost_cost in self.research_boost_cost:
                if _item_research_boost_cost:
                    _items.append(_item_research_boost_cost.to_dict())
            _dict['research_boost_cost'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in research_result (list)
        _items = []
        if self.research_result:
            for _item_research_result in self.research_result:
                if _item_research_result:
                    _items.append(_item_research_result.to_dict())
            _dict['research_result'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in research_material (list)
        _items = []
        if self.research_material:
            for _item_research_material in self.research_material:
                if _item_research_material:
                    _items.append(_item_research_material.to_dict())
            _dict['research_material'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResearchResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "research_id": obj.get("research_id"),
            "research_name": obj.get("research_name"),
            "repeatable_research": obj.get("repeatable_research"),
            "research_type": obj.get("research_type"),
            "research_time": obj.get("research_time"),
            "research_cost": [ResearchResponseInnerResearchCostInner.from_dict(_item) for _item in obj["research_cost"]] if obj.get("research_cost") is not None else None,
            "research_boost_cost": [ResearchResponseInnerResearchCostInner.from_dict(_item) for _item in obj["research_boost_cost"]] if obj.get("research_boost_cost") is not None else None,
            "research_result": [ResearchResponseInnerResearchResultInner.from_dict(_item) for _item in obj["research_result"]] if obj.get("research_result") is not None else None,
            "research_material": [ResearchResponseInnerResearchMaterialInner.from_dict(_item) for _item in obj["research_material"]] if obj.get("research_material") is not None else None
        })
        return _obj


