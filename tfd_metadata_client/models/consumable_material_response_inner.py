# coding: utf-8

"""
    The First Descendant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ConsumableMaterialResponseInner(BaseModel):
    """
    ConsumableMaterialResponseInner
    """ # noqa: E501
    consumable_material_id: Optional[StrictStr] = Field(default=None, description="Consumable Item identifier")
    image_url: Optional[StrictStr] = Field(default=None, description="Consumable Item image path")
    consumable_material_name: Optional[StrictStr] = Field(default=None, description="Consumable Item name")
    required_mastery_rank_level: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Required Mastery Rank")
    material_type: Optional[StrictStr] = Field(default=None, description="Material type")
    acquisition_detail: Optional[List[StrictStr]] = Field(default=None, description="Acquisition source (refer to /meta/acquisition-detail API)")
    amorphous_reward: Optional[List[StrictStr]] = Field(default=None, description="Amorphous Material open reward (refer to /meta/amorphous-reward API)")
    amorphous_open_condition: Optional[List[StrictStr]] = Field(default=None, description="Amorphous Material opening location (refer to /meta/amorphous-open-condition-description API)")
    __properties: ClassVar[List[str]] = ["consumable_material_id", "image_url", "consumable_material_name", "required_mastery_rank_level", "material_type", "acquisition_detail", "amorphous_reward", "amorphous_open_condition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumableMaterialResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumableMaterialResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumable_material_id": obj.get("consumable_material_id"),
            "image_url": obj.get("image_url"),
            "consumable_material_name": obj.get("consumable_material_name"),
            "required_mastery_rank_level": obj.get("required_mastery_rank_level"),
            "material_type": obj.get("material_type"),
            "acquisition_detail": obj.get("acquisition_detail"),
            "amorphous_reward": obj.get("amorphous_reward"),
            "amorphous_open_condition": obj.get("amorphous_open_condition")
        })
        return _obj


